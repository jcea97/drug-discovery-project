# -*- coding: utf-8 -*-
"""prediction_model_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pC-8T6YekBzbjxVfO9RSkd3kvynNfMly

# **QSAR Model Building of Acetylcholinesterase Inhibitors**

# Read in data
"""

import pandas as pd

dataset_url = 'https://github.com/dataprofessor/data/raw/master/acetylcholinesterase_06_bioactivity_data_3class_pIC50_pubchem_fp.csv'
dataset = pd.read_csv(dataset_url)
dataset

X = dataset.drop(['pIC50'], axis=1)
X

Y = dataset.iloc[:,-1]
Y

"""# Remove low variance features"""

from sklearn.feature_selection import VarianceThreshold

def remove_low_variance(input_data, threshold=0.1):
    selection = VarianceThreshold(threshold)
    selection.fit(input_data)
    return input_data[input_data.columns[selection.get_support(indices=True)]]

X = remove_low_variance(X, threshold=0.1)
X

X.to_csv('descriptor_list.csv', index = False)

# In the app, use the following to get this same descriptor list
# of 218 variables from the initial set of 881 variables
# Xlist = list(pd.read_csv('descriptor_list.csv').columns)
# X[Xlist]

"""# Random Forest Regression Model"""

from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score

model = RandomForestRegressor(n_estimators=500, random_state=42)
model.fit(X, Y)
r2 = model.score(X, Y)
r2

"""## Model Prediction"""

Y_pred = model.predict(X)
Y_pred

"""## Model Performance"""

# Commented out IPython magic to ensure Python compatibility.
print('Mean squared error (MSE): %.2f'
#       % mean_squared_error(Y, Y_pred))
print('Coefficient of determination (R^2): %.2f'
#       % r2_score(Y, Y_pred))

"""# Data Visualization (Experimental vs Predicted pIC50 for Training Data)"""

import matplotlib.pyplot as plt
import numpy as np

plt.figure(figsize=(5,5))
plt.scatter(x=Y, y=Y_pred, c="#7CAE00", alpha=0.3)

# Add trendline
# https://stackoverflow.com/questions/26447191/how-to-add-trendline-in-python-matplotlib-dot-scatter-graphs
z = np.polyfit(Y, Y_pred, 1)
p = np.poly1d(z)

plt.plot(Y,p(Y),"#F8766D")
plt.ylabel('Predicted pIC50')
plt.xlabel('Experimental pIC50')

"""# Save Model as Pickle Object"""

import pickle

pickle.dump(model, open('acetylcholinesterase_model.pkl', 'wb'))